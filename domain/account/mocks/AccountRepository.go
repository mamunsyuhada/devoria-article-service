// Code generated by mockery v2.7.4. DO NOT EDIT.

package mocks

import (
	context "context"

	account "github.com/sangianpatrick/devoria-article-service/domain/account"

	mock "github.com/stretchr/testify/mock"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *AccountRepository) FindByEmail(ctx context.Context, email string) (account.Account, error) {
	ret := _m.Called(ctx, email)

	var r0 account.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) account.Account); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(account.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *AccountRepository) FindByID(ctx context.Context, ID int64) (account.Account, error) {
	ret := _m.Called(ctx, ID)

	var r0 account.Account
	if rf, ok := ret.Get(0).(func(context.Context, int64) account.Account); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(account.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *AccountRepository) Save(ctx context.Context, _a1 account.Account) (int64, error) {
	ret := _m.Called(ctx, _a1)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, account.Account) int64); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, account.Account) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ID, updatedAccount
func (_m *AccountRepository) Update(ctx context.Context, ID int64, updatedAccount account.Account) error {
	ret := _m.Called(ctx, ID, updatedAccount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, account.Account) error); ok {
		r0 = rf(ctx, ID, updatedAccount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
